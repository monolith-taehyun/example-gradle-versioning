plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.3'
    id 'io.spring.dependency-management' version '1.1.3'
}

group = 'com.example'
version = '0.0.2'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

task generateChangelog {
    doLast {
        def changelogFile = new File('CHANGELOG.md')

        // 현재 Git 태그를 사용하여 버전 가져오기 (예: v1.2.3)
        def currentVersion = 'v' + project.version.toString()

        // 이전 버전 가져오기 (가장 최근 태그 이전)
        def previousVersion = getPreviousVersion()
        println previousVersion

        // Git log 명령 실행하여 변경 로그 생성
        def changeLogContent = getChangeLogContent(previousVersion, currentVersion)
        println changeLogContent

        // Changelog 파일에 내용 작성
        def existingContent = file(changelogFile).text
        changelogFile.text = "## " + currentVersion + getCurrentDate() + "\n";

        for (changeLogEntry in changeLogContent) {
            changelogFile.append('\n- ' + changeLogEntry.replaceAll(/^'|'$/, ""))
        }

        changelogFile.append("\n\n" + existingContent)
    }
}

def getPreviousVersion() {
    return 'git describe --abbrev=0 --tags HEAD^'.execute().text.trim()
}

def getChangeLogContent(previousVersion, currentVersion) {
    def gitLogCommand = "git --no-pager log --pretty=format:'%s' ${previousVersion}.."
    def process = gitLogCommand.execute()
    def output = new StringBuilder()
    process.waitForProcessOutput(output, System.err)
    return output.toString().trim().split('\n')
}

def getCurrentDate() {
    return new Date().format(" (yyyy-MM-dd)")
}